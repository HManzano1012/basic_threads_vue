import { readdirSync, readFileSync } from 'node:fs';
import { join } from 'node:path';
import { defineNuxtModule, createResolver, addComponent } from '@nuxt/kit';
import oxc from 'oxc-parser';

const module = defineNuxtModule({
  meta: {
    name: "shadcn",
    configKey: "shadcn"
  },
  defaults: {
    prefix: "",
    componentDir: "./components/ui"
  },
  async setup({ prefix, componentDir }, nuxt) {
    const COMPONENT_DIR_PATH = componentDir;
    const ROOT_DIR_PATH = nuxt.options.rootDir;
    const { resolve, resolvePath } = createResolver(ROOT_DIR_PATH);
    nuxt.hook("components:dirs", (dirs) => {
      dirs.unshift({
        path: resolve(COMPONENT_DIR_PATH),
        extensions: []
      });
    });
    try {
      readdirSync(resolve(COMPONENT_DIR_PATH)).forEach(async (dir) => {
        try {
          const filePath = await resolvePath(join(COMPONENT_DIR_PATH, dir, "index"), { extensions: [".ts", ".js"] });
          const content = readFileSync(filePath, { encoding: "utf8" });
          const ast = oxc.parseSync(content, {
            sourceType: "module",
            sourceFilename: filePath
          });
          const program = JSON.parse(ast.program);
          const exportedKeys = program.body.filter((node) => node.type === "ExportNamedDeclaration").flatMap((node) => node.specifiers.map((specifier) => specifier.exported.name)).filter((key) => /^[A-Z]/.test(key));
          exportedKeys.forEach((key) => {
            addComponent({
              name: `${prefix}${key}`,
              // name of the component to be used in vue templates
              export: key,
              // (optional) if the component is a named (rather than default) export
              filePath: resolve(filePath)
            });
          });
        } catch (err) {
          if (err instanceof Error)
            console.warn("Module error: ", err.message);
        }
      });
    } catch (err) {
      if (err instanceof Error)
        console.warn(err.message);
    }
  }
});

export { module as default };
