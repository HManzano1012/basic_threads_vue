import type { ComputedRef, Ref } from 'vue';
import type { PrimitiveProps } from '../Primitive';
import type { DataOrientation, Direction, Type } from '../shared/types';
export interface AccordionRootProps extends PrimitiveProps {
    /**
     * Determines whether one or multiple items can be opened at the same time.
     */
    type: Type;
    /**
     * The controlled value of the item to expand when type is "single" or the controlled values of the items to expand when type is "multiple".
     */
    modelValue?: string | string[];
    /**
     * The default value of the item to expand when type is "single" or the default values of the items to expand when type is "multiple".
     * Use when you do not need to control the state of the item(s).
     */
    defaultValue?: string | string[];
    /**
     * When type is "single", allows closing content when clicking trigger for an open item.
     * When type is "multiple", this prop has no effect.
     *
     * @defaultValue false
     */
    collapsible?: boolean;
    /**
     * When `true`, prevents the user from interacting with the accordion and all its items
     *
     * @defaultValue false
     */
    disabled?: boolean;
    /**
     * The reading direction of the accordion when applicable. If omitted, assumes LTR (left-to-right) reading mode.
     *
     * @defaultValue "ltr"
     */
    dir?: Direction;
    /**
     * The orientation of the accordion.
     *
     * @defaultValue "vertical"
     */
    orientation?: DataOrientation;
}
export type AccordionRootEmits = {
    /**
     * Event handler called when the expanded state of an item changes
     */
    'update:modelValue': [value: string | string[] | undefined];
};
export type AccordionRootContext = {
    disabled: Ref<AccordionRootProps['disabled']>;
    direction: Ref<AccordionRootProps['dir']>;
    orientation: AccordionRootProps['orientation'];
    parentElement: Ref<HTMLElement | undefined>;
    changeModelValue(value: string): void;
    isSingle: ComputedRef<boolean>;
    modelValue: Ref<string | undefined | string[]>;
    collapsible: boolean;
};
export declare const injectAccordionRootContext: <T extends AccordionRootContext | null | undefined = AccordionRootContext>(fallback?: T | undefined) => T extends null ? AccordionRootContext | null : AccordionRootContext, provideAccordionRootContext: (contextValue: AccordionRootContext) => AccordionRootContext;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<AccordionRootProps>, {
    disabled: boolean;
    orientation: string;
    collapsible: boolean;
}>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (value: string | string[] | undefined) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<AccordionRootProps>, {
    disabled: boolean;
    orientation: string;
    collapsible: boolean;
}>>> & {
    "onUpdate:modelValue"?: ((value: string | string[] | undefined) => any) | undefined;
}, {
    disabled: boolean;
    collapsible: boolean;
    orientation: DataOrientation;
}, {}>, Readonly<{
    default(props: {
        /** Current active value */
        modelValue: string | string[] | undefined;
    }): any;
}> & {
    default(props: {
        /** Current active value */
        modelValue: string | string[] | undefined;
    }): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
